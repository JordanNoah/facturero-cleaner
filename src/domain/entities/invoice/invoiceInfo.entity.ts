import CompensationEntity from "./compensation.entity"
import PaymentEntity from "./payment.entity"
import TotalWithTaxEntity from "./totalWithTax.entity"

export class InvoiceInfoEntity {
    constructor(
        public id: number,
        public uuid: string,
        public issueDate: Date,
        public establishmentAddress: string,
        public specialTaxpayer: string,
        public accountingObligation: string,
        public foreignTrade: string,
        public incoTermInvoice: string,
        public incoTermLocation: string,
        public countryOfOrigin: string,
        public portOfShipment: string,
        public portOfDestination: string,
        public destinationCountry: string,
        public acquisitionCountry: string,
        public buyerIdentificationType: string,
        public deliveryNote: string,
        public buyerBusinessName: string,
        public buyerIdentification: string,
        public buyerAddress: string,
        public totalWithoutTaxes: number,
        public totalSubsidy: number,
        public incoTermTotalWithoutTaxes: string,
        public totalDiscount: number,
        public reimbursementDocCode: number,
        public totalReimbursementInvoices: number,
        public totalReimbursementTaxableBase: number,
        public totalReimbursementTax: number,
        public tip: number,
        public internationalFreight: number,
        public internationalInsurance: number,
        public customsExpenses: number,
        public otherTransportExpenses: number,
        public totalAmount: number,
        public currency: string,
        public plate: string,
        public vatWithheldValue: number,
        public incomeTaxWithheldValue: number,
        public totalWithTaxes: TotalWithTaxEntity[],
        public compensations: CompensationEntity[],
        public payments: PaymentEntity[],
        public invoiceId: number,
        public createdAt: Date,
        public updatedAt: Date,
        public deletedAt: Date | null
    ){}

    static create(object:{[key:string]:any}): InvoiceInfoEntity {
        const { id, uuid, issueDate, establishmentAddress, specialTaxpayer, accountingObligation, foreignTrade, incoTermInvoice, incoTermLocation, countryOfOrigin, portOfShipment, portOfDestination, destinationCountry, acquisitionCountry, buyerIdentificationType, deliveryNote, buyerBusinessName, buyerIdentification, buyerAddress, totalWithoutTaxes, totalSubsidy, incoTermTotalWithoutTaxes, totalDiscount, reimbursementDocCode, totalReimbursementInvoices, totalReimbursementTaxableBase, totalReimbursementTax, tip, internationalFreight, internationalInsurance, customsExpenses, otherTransportExpenses, totalAmount, currency, plate, vatWithheldValue, incomeTaxWithheldValue, totalWithTaxes, compensations, payments, invoiceId, createdAt, updatedAt, deletedAt } = object
        return new InvoiceInfoEntity(
            id,
            uuid,
            issueDate,
            establishmentAddress,
            specialTaxpayer,
            accountingObligation,
            foreignTrade,
            incoTermInvoice,
            incoTermLocation,
            countryOfOrigin,
            portOfShipment,
            portOfDestination,
            destinationCountry,
            acquisitionCountry,
            buyerIdentificationType,
            deliveryNote,
            buyerBusinessName,
            buyerIdentification,
            buyerAddress,
            totalWithoutTaxes,
            totalSubsidy,
            incoTermTotalWithoutTaxes,
            totalDiscount,
            reimbursementDocCode,
            totalReimbursementInvoices,
            totalReimbursementTaxableBase,
            totalReimbursementTax,
            tip,
            internationalFreight,
            internationalInsurance,
            customsExpenses,
            otherTransportExpenses,
            totalAmount,
            currency,
            plate,
            vatWithheldValue,
            incomeTaxWithheldValue,
            totalWithTaxes,
            compensations,
            payments,
            invoiceId,
            createdAt,
            updatedAt,
            deletedAt ? deletedAt : null
        )
    }
}